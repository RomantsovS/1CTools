#Использовать v8runner
#Использовать cmdline
#Использовать irac

Перем СЕРВЕР_1С; // имя сервера 1с
Перем ИМЯ_КЛАСТЕРА_1С; // имя кластера 1с
Перем ИМЯ_БАЗЫ_1С; // имя базы 1с на сервере
Перем ПЛАТФОРМА_1С_ВЕРСИЯ; // версия платформы "8.3.18.1616"
Перем RAC_PORT; // порт
Перем Лог;

Перем ПОРТ_КЛАСТЕРА_1С; // порт кластера 1с
Перем АДМИН_1С_ИМЯ;
Перем АДМИН_1С_ПАРОЛЬ; // пароль админа 1с

Перем КаталогХранилища; // путь к хранилищу 1с
Перем ПользовательХранилища;
Перем ПарольХранилища; // пароль пользователя хранилища 1с

Перем ИмяРасширения; // имя расширения

Перем ОжидатьВыполнениеОтложенныхОбработчиков; // Ждать отложенные обработчики обновления
Перем ПаузаДоБлокировки; // Пауза до начала длокировки, сек
Перем ДлительностьБлокировки; // Длительность блокировкм, сек

Процедура Инициализация()
    
    Лог = Логирование.ПолучитьЛог("runIBReleaseUpdate");
    
    Парсер = Новый ПарсерАргументовКоманднойСтроки();
    Парсер.ДобавитьИменованныйПараметр("-platform");
    Парсер.ДобавитьИменованныйПараметр("-server1c");
    Парсер.ДобавитьИменованныйПараметр("-cluster1c_port");
    Парсер.ДобавитьИменованныйПараметр("-base_name");
    Парсер.ДобавитьИменованныйПараметр("-admin_1c_name");
    Парсер.ДобавитьИменованныйПараметр("-admin_1c_pwd");
    Парсер.ДобавитьИменованныйПараметр("-rac_port");
    Парсер.ДобавитьИменованныйПараметр("-cluster1c_name");
    Парсер.ДобавитьИменованныйПараметр("-storage_path");
    Парсер.ДобавитьИменованныйПараметр("-storage_login");
    Парсер.ДобавитьИменованныйПараметр("-storage_password");
    Парсер.ДобавитьИменованныйПараметр("-extension_name");
    Парсер.ДобавитьИменованныйПараметр("-wait_before_lock");
    Парсер.ДобавитьИменованныйПараметр("-lock_time");
    Парсер.ДобавитьИменованныйПараметр("-wait_deferred_handler");
    Парсер.ДобавитьИменованныйПараметр("-verbose");
    
    Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);
    
    ПЛАТФОРМА_1С_ВЕРСИЯ = Параметры["-platform"];
    СЕРВЕР_1С = Параметры["-server1c"];
    ИМЯ_КЛАСТЕРА_1С = Параметры["-cluster1c_name"];
    ИМЯ_БАЗЫ_1С = Параметры["-base_name"];
    
    ПрочитатьПараметр(Параметры, "-admin_1c_name", АДМИН_1С_ИМЯ, "");
    ПрочитатьПараметр(Параметры, "-admin_1c_pwd", АДМИН_1С_ПАРОЛЬ, "");
    
    ПрочитатьПараметр(Параметры, "-rac_port", RAC_PORT, 1545);
    ПрочитатьПараметр(Параметры, "-cluster1c_port", ПОРТ_КЛАСТЕРА_1С, 1540);
    
    ПрочитатьПараметр(Параметры, "-storage_path", КаталогХранилища, "");
    ПрочитатьПараметр(Параметры, "-storage_login", ПользовательХранилища, "");
    ПрочитатьПараметр(Параметры, "-storage_password", ПарольХранилища, "");
    
    ПрочитатьПараметр(Параметры, "-extension_name", ИмяРасширения, "");
    
    ПрочитатьПараметр(Параметры, "-wait_before_lock", ПаузаДоБлокировки, 0);
    ПрочитатьПараметр(Параметры, "-lock_time", ДлительностьБлокировки, 3600);
    
    ПрочитатьПараметр(Параметры, "-wait_deferred_handler", ОжидатьВыполнениеОтложенныхОбработчиков, 0);
    
    verbose = Параметры["-verbose"];
    Если ЗначениеЗаполнено(verbose) И verbose = "true" Тогда
        Лог.УстановитьУровень(УровниЛога.Отладка);
        
        Для Каждого СтрПар Из Параметры Цикл
            Лог.Отладка(СтрПар.Ключ + ": " + СтрПар.Значение);
        КонецЦикла;
    КонецЕсли;
    
КонецПроцедуры

Процедура ПрочитатьПараметр(Параметры, ИмяПараметра, Назначение, ЗначениеПоУмолчанию)
    Назначение = Параметры[ИмяПараметра];
    Если Не ЗначениеЗаполнено(Назначение) Тогда
        Назначение = ЗначениеПоУмолчанию;
    КонецЕсли;
КонецПроцедуры

Функция ПолучитьИнформационнуюБазуКластера()
    СтрокаПодключения = СтрШаблон("%1:%2", СЕРВЕР_1С, RAC_PORT);
    
    Админка = Новый УправлениеКластером1С( , СтрокаПодключения);
    
    Кластеры = Админка.Кластеры();
    
    // ОтборКластеров = Новый Соответствие();
    // // в отборе имя кластера возвращается в кавычках
    // ОтборКластеров.Вставить("Имя", СтрШаблон("""%1""", ИМЯ_КЛАСТЕРА_1С));
    
    //СписокКластеров = Кластеры.Список(ОтборКластеров);
    СписокКластеров = Кластеры.Список();
    
    // Если СписокКластеров.Количество() <> 1 Тогда
    //     ТекстИсключения = СтрШаблон("Найдено %1 кластеров по отбору ", СписокКластеров.Количество());
    //     Для Каждого СтрокаОтбора Из ОтборКластеров Цикл
    //         ТекстИсключения = ТекстИсключения + Символы.ПС + СтрокаОтбора.Ключ + "-" + СтрокаОтбора.Значение;
    //     КонецЦикла;
    
    //     ВызватьИсключение ТекстИсключения;
    // КонецЕсли;
    
    // Обходим список кластеров
    Для Каждого Кластер Из СписокКластеров Цикл
        //Лог.Отладка("Cluster name = " + Кластер.Получить("Имя"));
        
        ИБКластера = Кластер.ИнформационныеБазы();
        
        База = ИБКластера.Получить(ИМЯ_БАЗЫ_1С);
        
        Если База = Неопределено Тогда
            ВызватьИсключение "База не найдена";
        КонецЕсли;
        
        Возврат База;
    КонецЦикла;
КонецФункции

Процедура ПодождатьЗавершенияСеансов()
    
    ИнтервалОжидания = 30000; // 30 sek
    МаксимальноеКоличествоИнтервалов = 4;
    
    Сеансы = Новый Массив;
    
    База = ПолучитьИнформационнуюБазуКластера();
    База.УстановитьАдминистратора(АДМИН_1С_ИМЯ, АДМИН_1С_ПАРОЛЬ);
    
    Для Сч = 1 По МаксимальноеКоличествоИнтервалов Цикл
        Сеансы = База.Сеансы().Список();
        
        КоличествоСеансов = Сеансы.Количество();
        
        Если КоличествоСеансов = 0 Тогда
            Лог.Информация("Активных сеансов нет");
            Прервать;
        КонецЕсли;
        
        Текст = СтрШаблон("Ждём завершения сеансов #%1 / %2, активных: %3", Сч, МаксимальноеКоличествоИнтервалов,
                КоличествоСеансов);
        Лог.Информация(Текст);
        
        sleep(ИнтервалОжидания);
    КонецЦикла;
    
    Сеансы = База.Сеансы().Список();
    
    Если Сеансы.Количество() > 0 Тогда
        КоличествоСеансов = Сеансы.Количество();
        Лог.Информация(СтрШаблон("Осталось активных: %1", КоличествоСеансов));
        
        Для Сч = 0 По КоличествоСеансов - 1 Цикл
            Лог.Отладка(СтрШаблон("Удаляю сеанс %1", Сч));
            
            Попытка
                Сеанс = Сеансы[Сч];
                Сеанс.Завершить();
            Исключение
                Лог.Ошибка("Возникла ошибка при удалении сеанса");
            КонецПопытки;
        КонецЦикла;
    КонецЕсли;
    
КонецПроцедуры

Процедура УстановитьБлокировкуСеансов()
    
    Лог.Информация("Устанавливаю блокировку сеансов");
    
    База = ПолучитьИнформационнуюБазуКластера();
    База.УстановитьАдминистратора(АДМИН_1С_ИМЯ, АДМИН_1С_ПАРОЛЬ);
    
    ТекДата = ТекущаяДата();
    НачалоБлокировки = ТекДата + Число(ПаузаДоБлокировки);
    ОкончаниеБлокировки = НачалоБлокировки + Число(ДлительностьБлокировки);
    // Установка блокировки начала сеансов с базой
    ПараметрыИБ = Новый Структура();
    ПараметрыИБ.Вставить("НачалоБлокировкиСеансов", НачалоБлокировки);
    ПараметрыИБ.Вставить("ОкончаниеБлокировкиСеансов", ОкончаниеБлокировки);
    ПараметрыИБ.Вставить("СообщениеБлокировкиСеансов", "Обновление, держитесь...");
    ПараметрыИБ.Вставить("КодРазрешения", "123456");
    ПараметрыИБ.Вставить("БлокировкаСеансовВключена", Перечисления.СостоянияВыключателя.Включено);
    
    База.Изменить(ПараметрыИБ);
    
    Лог.Информация("Блокировка сеансов успешно. Начало: " + НачалоБлокировки
        + ", Окончание: " + ОкончаниеБлокировки);
    
КонецПроцедуры

Процедура СнятьБлокировкуСеансов()
    
    Лог.Информация("Снимаю блокировку сеансов");
    
    База = ПолучитьИнформационнуюБазуКластера();
    База.УстановитьАдминистратора(АДМИН_1С_ИМЯ, АДМИН_1С_ПАРОЛЬ);
    
    // Снятие блокировки начала сеансов с базой
    ПараметрыИБ = Новый Структура();
    ПараметрыИБ.Вставить("БлокировкаСеансовВключена", Перечисления.СостоянияВыключателя.Выключено);
    
    База.Изменить(ПараметрыИБ);
    
    Лог.Информация("Снятие блокировки сеансов успешно");
    
КонецПроцедуры

// Устанавливает контекст библиотеки v8runner и возвращиет указатель на объект.
//
// Параметры:
//
// Возвращаемое значение:
//  УправлениеКонфигуратором - объект библиотеки v8runner;
//
Функция ПолучитьУправлениеКонфигуратором()
    
    УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
    
    СтрокаСоединения = "/S""&ИмяСервера1СПредприятия\&ИмяИнформационнойБазыНаСервере1СПредприятия""";
    СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИмяСервера1СПредприятия", СЕРВЕР_1С);
    СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИмяИнформационнойБазыНаСервере1СПредприятия", ИМЯ_БАЗЫ_1С);
    
    УправлениеКонфигуратором.УстановитьКонтекст(СтрокаСоединения, АДМИН_1С_ИМЯ, АДМИН_1С_ПАРОЛЬ);
    УправлениеКонфигуратором.УстановитьКлючРазрешенияЗапуска("123456");
    
    УправлениеКонфигуратором.ИспользоватьВерсиюПлатформы(ПЛАТФОРМА_1С_ВЕРСИЯ);
    
    Возврат УправлениеКонфигуратором;
    
КонецФункции

// Обновляет конфигурацию из хранилища
//
// Параметры:
//
// Возвращаемое значение:
//  Булево - Признак успешного выполнения.
//
Функция ОбновитьКонфигурациюИзХранилища()
    
    Лог.Информация(НСтр("ru = 'Обновление конфигурации из хранилища.'"));
    
    УправлениеКонфигуратором = ПолучитьУправлениеКонфигуратором();
    
    ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
    ПараметрыЗапуска.Добавить("/ConfigurationRepositoryF """ + КаталогХранилища + """");
    ПараметрыЗапуска.Добавить("/ConfigurationRepositoryN """ + ПользовательХранилища + """");
    
    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        ПараметрыЗапуска.Добавить("/ConfigurationRepositoryP """ + ПарольХранилища + """");
    КонецЕсли;
    
    ПараметрыЗапуска.Добавить("/ConfigurationRepositoryUpdateCfg");
    
    Если ЗначениеЗаполнено(ИмяРасширения) Тогда
        ПараметрыЗапуска.Добавить("-Extension" + ИмяРасширения);
    КонецЕсли;
    
    // ВАЖНО!!!! Флаг <-v> должен быть обязательно после команды ConfigurationRepositoryUpdateCfg
    // Если это нарушить, то всегда получается последняя версия конфигурации
    // Если НомерВерсииХранилища > 0 Тогда
    // 	ПараметрыЗапуска.Добавить("-v " + НомерВерсииХранилища);
    // КонецЕсли;
    ПараметрыЗапуска.Добавить("-force");
    
    Результат = Ложь;
    Попытка
        УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
        Лог.Информация(УправлениеКонфигуратором.ВыводКоманды());
        Результат = Истина;
    Исключение
        Шаблон = НСтр("ru = 'Ошибка при обновлении конфигурации из хранилища.
                |%1'");
        ТекстОшибки = СтрШаблон(Шаблон, ОписаниеОшибки());
        Лог.Ошибка(ТекстОшибки);;
    КонецПопытки;
    
    Лог.Отладка(НСтр("ru = 'Обновление конфигурации из хранилища завершено.'"));
    
    Возврат Результат;
    
КонецФункции

// Выполняет обновление конфигурации информационной базы
//
// Параметры:
//
// Возвращаемое значение:
//  Булево - Признак успешного выполнения.
//
Функция ВыполнитьОбновлениеКонфигурацииИнформационнойБазы()
    
    Лог.Информация(НСтр("ru = 'Обновление конфигурации информационной базы.'"));
    
    УправлениеКонфигуратором = ПолучитьУправлениеКонфигуратором();
    
    ДатаНачала = ТекущаяДата();
    ЖдатьСекунд = 600;
    ДатаОкончания = ДатаНачала + ЖдатьСекунд;
    
    Лог.Отладка(СтрШаблон("Начало обновления конфигурации ИБ начало: %1, окончание - %2", ДатаНачала, ДатаОкончания));
    
    Результат = Ложь;
    Пока ТекущаяДата() < ДатаОкончания Цикл
        Попытка
            УправлениеКонфигуратором.ОбновитьКонфигурациюБазыДанных( , , , ИмяРасширения);
            Результат = Истина;
        Исключение
            Шаблон = НСтр("ru = '%1 Ошибка при обновлении конфигурации информационной базы.
                    |%2'");
            ТекстОшибки = СтрШаблон(Шаблон, ТекущаяДата(), УправлениеКонфигуратором.ВыводКоманды());
            Лог.Ошибка(ТекстОшибки);
            Продолжить;
        КонецПопытки;
        
        Прервать;
    КонецЦикла;
    
    Лог.Отладка(НСтр("ru = 'Обновление конфигурации информационной базы завершено.'"));
    
    Возврат Результат;
    
КонецФункции

Процедура ВыполнитьМонопольноеОбновлениеИБ()
    
    Лог.Информация(НСтр("ru = 'Монопольное обновление информационной базы.'"));

    УправлениеКонфигуратором = ПолучитьУправлениеКонфигуратором();
    ДопКлючиЗапуска = "/Execute """ + ТекущийКаталог() + "\ЗавершитьРаботуСистемы.epf" + """";

    ДатаНачала = ТекущаяДата();
    ЖдатьСекунд = 600;
    ДатаОкончания = ДатаНачала + ЖдатьСекунд;
    
    Лог.Отладка(СтрШаблон("Начало монопольного обновления ИБ начало: %1, окончание - %2", ДатаНачала, ДатаОкончания));
    
    Пока ТекущаяДата() < ДатаОкончания Цикл
        Попытка
            УправлениеКонфигуратором.ЗапуститьВРежимеПредприятия(, , ДопКлючиЗапуска);
            Лог.Информация(УправлениеКонфигуратором.ВыводКоманды());
        Исключение
            Шаблон = НСтр("ru = '%1 Ошибка при монопольном обновлении ИБ.
                    |%2'");
            ТекстОшибки = СтрШаблон(Шаблон, ТекущаяДата(), ОписаниеОшибки());
            Лог.Ошибка(ТекстОшибки);
            Продолжить;
        КонецПопытки;
        
        Прервать;
    КонецЦикла;
    
    Лог.Отладка(НСтр("ru = 'Монопольное обновление ИБ завершено.'"));
    
КонецПроцедуры

Процедура ВыполнитьОбновлениеИнформационнойБазы()
    
    УстановитьБлокировкуСеансов();
    
    Миллисекунд = 1000;
    sleep(ПаузаДоБлокировки * Миллисекунд);
    
    ПодождатьЗавершенияСеансов();
    
    Результат = ОбновитьКонфигурациюИзХранилища();
    
    Если Результат Тогда
        Результат = ВыполнитьОбновлениеКонфигурацииИнформационнойБазы();
    КонецЕсли;
    
    Если Результат Тогда
        ВыполнитьМонопольноеОбновлениеИБ();
    КонецЕсли;
    
    // Соединение = УстановитьВнешнееСоединениеСБазой();
    
    // // МОНОПОЛЬНОЕ ОБНОВЛЕНИЕ
    // Лог.Отладка("Запускаем Соединение.ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы()");
    // Если Соединение = Неопределено Тогда
    //     Возврат;
    // КонецЕсли;
    
    // МодульОбновленияИБ = Соединение.ОбновлениеИнформационнойБазы;
    
    // Попытка
    //     РезультатОбновления = МодульОбновленияИБ.ВыполнитьОбновлениеИнформационнойБазы();
    // Исключение
    //     РезультатОбновления = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
    // КонецПопытки;
    
    // Если РезультатОбновления = "Успешно" Тогда
    //     Лог.Информация(НСтр("ru = 'Принятие обновлений в информационной базе завершено.'"));
    
    //     Освободить(МодульОбновленияИБ);
    
    // //     // УСТАНОВКА ПРИОРИТЕТА
    // //     МодульОбновленияИБ = Соединение.ОбновлениеИнформационнойБазыСлужебный;
    // //     СведенияОбОбновлении = МодульОбновленияИБ.СведенияОбОбновленииИнформационнойБазы();
    // //     УправлениеОтложеннымОбновлением = СведенияОбОбновлении.УправлениеОтложеннымОбновлением;
    
    // //     Если Не УправлениеОтложеннымОбновлением.Свойство("ФорсироватьОбновление") Тогда
    // //         УправлениеОтложеннымОбновлением.Вставить("ФорсироватьОбновление");
    // //     КонецЕсли;
    // //     УправлениеОтложеннымОбновлением.ФорсироватьОбновление = "ОбработкаДанных";
    // //     МодульОбновленияИБ.ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
    
    // //     Освободить(УправлениеОтложеннымОбновлением);
    // //     Освободить(СведенияОбОбновлении);
    // //     Освободить(МодульОбновленияИБ);
    // ИначеЕсли РезультатОбновления = "НеТребуется" Тогда
    //     Лог.Информация(НСтр("ru = 'Принятие обновлений в информационной базе не требуется.'"));
    
    //     Освободить(МодульОбновленияИБ);
    
    // //     // ОТЛОЖЕННОЕ ОБНОВЛЕНИЕ
    // //     ЗапуститьОтложенноеОбновлениеВИнформационнойБазе(Соединение, ОжидатьВыполнениеОтложенныхОбработчиков);
    // ИначеЕсли РезультатОбновления = "ОшибкаУстановкиМонопольногоРежима" Тогда
    //     Освободить(МодульОбновленияИБ);
    
    //     Освободить(Соединение);
    //     Освободить(COMОбъект);
    
    //     ВызватьИсключение "Ошибка обновления: ОшибкаУстановкиМонопольногоРежима";
    // Иначе
    //     Освободить(МодульОбновленияИБ);
    
    //     Освободить(Соединение);
    //     Освободить(COMОбъект);
    
    //     ВызватьИсключение СтрШаблон(НСтр("ru = 'РезультатОбновления: %1'"), РезультатОбновления);
    // КонецЕсли;
    
    // Освободить(Соединение);
    // Освободить(COMОбъект);
    // ПодождатьЗавершенияСеансов();
    
    СнятьБлокировкуСеансов();
    
КонецПроцедуры

Попытка
    Инициализация();
    
    ВыполнитьОбновлениеИнформационнойБазы();
Исключение
    ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
    Лог.Ошибка(ТекстОшибки);
    ВызватьИсключение ТекстОшибки;
КонецПопытки;

Лог.Информация("script completed");